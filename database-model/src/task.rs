//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "task")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub node_instance_id: Uuid,
    #[sea_orm(column_type = "JsonBinary")]
    pub body: Json,
    pub r#type: i32,
    pub status: i32,
    pub number: i32,
    pub message: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub used_resources: Option<Json>,
    pub created_time: DateTimeWithTimeZone,
    pub last_modified_time: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::node_instance::Entity",
        from = "Column::NodeInstanceId",
        to = "super::node_instance::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    NodeInstance,
}

impl Related<super::node_instance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NodeInstance.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
