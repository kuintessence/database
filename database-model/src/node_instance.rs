//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "node_instance")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub kind: i32,
    pub is_parent: bool,
    pub batch_parent_id: Option<Uuid>,
    pub status: i32,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub resource_meter: Option<Json>,
    pub log: Option<String>,
    pub queue_id: Option<Uuid>,
    pub flow_instance_id: Uuid,
    pub created_time: DateTimeWithTimeZone,
    pub last_modified_time: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::flow_instance::Entity",
        from = "Column::FlowInstanceId",
        to = "super::flow_instance::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    FlowInstance,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::BatchParentId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::queue::Entity",
        from = "Column::QueueId",
        to = "super::queue::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Queue,
    #[sea_orm(has_many = "super::task::Entity")]
    Task,
}

impl Related<super::flow_instance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlowInstance.def()
    }
}

impl Related<super::queue::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Queue.def()
    }
}

impl Related<super::task::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Task.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
