//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "flow_instance")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub logo: Option<String>,
    pub status: i32,
    #[sea_orm(column_type = "JsonBinary")]
    pub spec: Json,
    pub user_id: Uuid,
    pub created_time: DateTimeWithTimeZone,
    pub last_modified_time: DateTimeWithTimeZone,
    pub project_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::node_instance::Entity")]
    NodeInstance,
    #[sea_orm(
        belongs_to = "super::project::Entity",
        from = "Column::ProjectId",
        to = "super::project::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Project,
}

impl Related<super::node_instance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NodeInstance.def()
    }
}

impl Related<super::project::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Project.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
