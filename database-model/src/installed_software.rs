//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "installed_software")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub source_id: Uuid,
    pub software_id: Uuid,
    pub software_name: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub install_argument: Json,
    pub installed_time: DateTimeWithTimeZone,
    pub installed_user_id: Uuid,
    pub queue_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::software_source::Entity",
        from = "Column::SourceId",
        to = "super::software_source::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SoftwareSource,
}

impl Related<super::software_source::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SoftwareSource.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
