//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "file_transmit")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub file_metadata_id: Uuid,
    pub from_storage_server_id: Uuid,
    pub to_storage_server_id: Uuid,
    pub from_node_instance_id: Uuid,
    pub to_node_instance_id: Uuid,
    pub from_plot: String,
    pub to_plot: String,
    pub r#type: i32,
    pub status: i32,
    pub tracking_number: Option<String>,
    pub start_time: DateTimeWithTimeZone,
    pub end_time: Option<DateTimeWithTimeZone>,
    pub comment: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::file_metadata::Entity",
        from = "Column::FileMetadataId",
        to = "super::file_metadata::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    FileMetadata,
    #[sea_orm(
        belongs_to = "super::node_instance::Entity",
        from = "Column::FromNodeInstanceId",
        to = "super::node_instance::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    NodeInstance2,
    #[sea_orm(
        belongs_to = "super::node_instance::Entity",
        from = "Column::ToNodeInstanceId",
        to = "super::node_instance::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    NodeInstance1,
    #[sea_orm(
        belongs_to = "super::storage_server::Entity",
        from = "Column::FromStorageServerId",
        to = "super::storage_server::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    StorageServer2,
    #[sea_orm(
        belongs_to = "super::storage_server::Entity",
        from = "Column::ToStorageServerId",
        to = "super::storage_server::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    StorageServer1,
}

impl Related<super::file_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FileMetadata.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
